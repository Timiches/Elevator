Программа реализует симуляцию работы лифта в здании размером от 5 до 20 этажей.
На каждом этаже может быть от 0 до 10 человек вызвавших лифт.
Делится на 2 класса, класс самого лифта Elevator и вспомогательный класс, представляющий человека вызвавшего лифт Passenger.

Класс Passenger.

int currFloor – показывает, на каком этаже находится пассажир
int targetFloor – показывает, на какой этаж пассажиру необходимо добраться.
int totalFloors – общее количество этажей в здании. Необходимо для симуляции выбора этажа прибытия при создании пасажира.
boolean inElevator – находится ли персонаж в лифте. Нужно для удаления из общего списка всех людей, вызвавших лифт.

Конструктор и всевозможные гетеры\сетеры поняты, как по мне, за исключением void setTargetFlat().
Данный метод позволяет изменить нужный человеку этаж случайным числом. Если нужный этаж тот же,
на котором пассажир и находится – прибавляем еще этаж. Если пассажир еще и на самом верхнем этаже – тогда вместо прибавления отнимает единицу.

Теперь про класс Elevator.

boolean lifting – определяет, поднимается или опускается лифт
int floorsCount – общее количество этажей в доме
int liftTargetFloor – куда направляется лифт (на какой этаж)
int currFloor – где сейчас находится лифт.
char elevationMark – определяет знак, который будет отрисовываться в консоли: ^ - подъем, V – спуск.

int getDiff(Passenger passenger) – находит разницу между этажом пассажира и того, куда он хочет.
Если число отрицательное – значит пассажиру нужно вниз, и наоборот. Нужно для того, чтоб пассажир «не заходил» в лифт, который едет вверх, а самому нужно вниз.
boolean changeDirection() – отвечает за смену вектора движения лифта.
void nextFloor() – отвечает за смену позиции лифта в доме, то есть просто меняет этаж нахождения лифта.
void addPassenger() – отвечает за добавление пассажира в лифт.
void removePassenger() - отвечает за удаление пассажира из лифта.
void paint() – отвечает за отрисовку дома с позицией лифта и пассажиров, которые представлены в виде цифр,
которые уже в свою очередь показывают на какой этаж необходимо человеку.

Общий принцип работы лифта: изначально лифт идет на этаж того человека, что находится на самом высшем этаже.
По пути наверх лифт подбирает людей, которым также необходимо наверх. Если любому из пассажиров необходимо выше,
то лифт будет стремиться туда. После достижения высшего этажа (это не обязательно последний этаж дома), лифт будет,
по аналогии с подъемом, идти к человеку на самом нижнем этаже, также подбирая по дороге людей. И так, пока вызвавшие лифт люди не закончатся.

В консоли по кадрово отображается позиция лифта и его пассажиров. Каждый кадр – перемещение лифта на один этаж. Можно,
конечно, отрисовывать только те моменты, когда заходят или выходят пассажиры, но я посчитал лучшим оставить так, для наглядности.

Не совсем согласен с необходимостью, после выхода человека из лифта, по новой его ставить «в очередь» на вызов лифта.
Выглядит так, будто он просто катается по дому, да и попросту программа никогда в таком случае не закончится.
При необходимости, можно реализовать такую возможность путем добавления в конец метода removePassenger() вызова конструктора человека,
как бы это не звучало, и добавление его в список всех людей passengerList, ожидающих лифт.
